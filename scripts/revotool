#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Revotool -- a CLI tool for working with MODX Revolutionâ„¢.

Usage:
  revotool pull <remote> [options]
  revotool push <remote> [options]
  revotool remote add <remote> <host> [<username>]
  revotool remote remove <remote>
  revotool (-h | --help)
  revotool --version

Options:
  -s --save-password   Save the password in .netrc.
  -h --help            Show this screen.
  --version            Show version.

"""

import sys
from os import path
from getpass import getpass
from netrc import netrc
from docopt import docopt
from revotool import __version__
from revotool.fs import FS
from revotool.modx import MODXClient, MODXBasicAuthException
from revotool.pull import Puller
from revotool.push import Pusher
try:
    import __builtin__
    input = getattr(__builtin__, 'raw_input')
except (ImportError, AttributeError):
    pass


REMOTES_FILE = '_revotool/remotes.json'


def add_to_netrc(machine, login, password):
    with open(path.expanduser('~/.netrc'), 'a') as f:
        f.write('\nmachine {0}\n  login {1}\n  password {2}'.format(
            machine, login, password))


def get_from_netrc_or_prompt(machine, login_prompt, password_prompt,
        login_fallback=None, password_fallback=None):
    login, password = None, None
    from_rc = netrc().authenticators(machine)
    if from_rc:
        login, _, password = from_rc
    if not login:
        login = login_fallback or input(login_prompt)
    if not password:
        password = password_fallback or getpass(password_prompt)
    return login, password, bool(from_rc)


if __name__ == '__main__':
    arguments = docopt(__doc__, version=__version__)
    fs = FS('.')
    try:
        remotes = fs.read_data(REMOTES_FILE)
    except (OSError, IOError):
        remotes = {}

    if arguments['remote']:
        if arguments['add']:
            remotes[arguments['<remote>']] = {
                'host': arguments['<host>'],
                'username': arguments['<username>']
            }
        if arguments['remove']:
            del remotes[arguments['<remote>']]
        fs.write_data(REMOTES_FILE, remotes)
        sys.exit(0)

    if arguments['<remote>']:
        remote_name = arguments['<remote>']
        try:
            remote = remotes[remote_name]
        except KeyError:
            print('Remote {0} not found.'.format(remote_name))
            sys.exit(1)
        host = remote['host']
        username, password, is_from_rc = get_from_netrc_or_prompt(host,
            login_prompt='MODX(r) Username: ',
            password_prompt='MODX(r) Password: ',
            login_fallback=remote['username'])
        if not is_from_rc and arguments['--save-password']:
            add_to_netrc(host, username, password)
        try:
            modxclient = MODXClient(host, username, password)
        except MODXBasicAuthException:
            basic_host = 'basic+' + host
            basic_username, basic_password, basic_is_from_rc = \
                get_from_netrc_or_prompt(basic_host,
                    login_prompt='HTTP Basic username: ',
                    password_prompt='HTTP Basic password: ')
            modxclient = MODXClient(host, username, password, basic_username,
                    basic_password)
            if not basic_is_from_rc and arguments['--save-password']:
                add_to_netrc(basic_host, basic_username, basic_password)


    if arguments['pull']:
        puller = Puller(remote_name)
        puller.fs = fs
        puller.modxclient = modxclient
        for t in ['template', 'chunk', 'snippet', 'plugin']:
            puller.pull(t)

    if arguments['push']:
        pusher = Pusher(remote_name)
        pusher.fs = fs
        pusher.modxclient = modxclient
        for t in ['template', 'chunk', 'snippet', 'plugin']:
            pusher.push(t)

    # print(arguments)
else:
    print('WTF are you doing?!')
